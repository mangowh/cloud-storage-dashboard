/* tslint:disable */
/* eslint-disable */
/**
 * File Uploader API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CollectionOfObjectDto,
  ObjectDto,
} from '../models/index';
import {
    CollectionOfObjectDtoFromJSON,
    CollectionOfObjectDtoToJSON,
    ObjectDtoFromJSON,
    ObjectDtoToJSON,
} from '../models/index';

export interface GetObjectRequest {
    key: string;
}

export interface UploadFileRequest {
    file?: Blob;
}

/**
 * 
 */
export class S3Api extends runtime.BaseAPI {

    /**
     * Get details of a file by key
     */
    async getObjectRaw(requestParameters: GetObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectDto>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/s3/{key}`;
        urlPath = urlPath.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectDtoFromJSON(jsonValue));
    }

    /**
     * Get details of a file by key
     */
    async getObject(requestParameters: GetObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectDto> {
        const response = await this.getObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all files in the bucket
     */
    async getObjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfObjectDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/s3`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfObjectDtoFromJSON(jsonValue));
    }

    /**
     * List all files in the bucket
     */
    async getObjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfObjectDto> {
        const response = await this.getObjectsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Upload a file
     */
    async uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }


        let urlPath = `/api/s3`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectDtoFromJSON(jsonValue));
    }

    /**
     * Upload a file
     */
    async uploadFile(requestParameters: UploadFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectDto> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
